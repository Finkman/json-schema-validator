#ifndef NLOHMANN_JSON_SCHEMA_VERSION_HPP__
#define NLOHMANN_JSON_SCHEMA_VERSION_HPP__

#include <nlohmann/json-schema-decl.hpp>
#include <string>

namespace nlohmann
{
namespace json_schema
{
namespace about
{
// clang-format off
constexpr int VERSION_MAJOR=${${PROJECT_NAME}_VERSION_MAJOR};
constexpr int VERSION_MINOR=${${PROJECT_NAME}_VERSION_MINOR};
constexpr int VERSION_PATCH=${${PROJECT_NAME}_VERSION_PATCH};
constexpr int VERSION_ID=((VERSION_MAJOR*10000) + (VERSION_MINOR*100) + (VERSION_PATCH));
// clang-format on

// Get library version as string
JSON_SCHEMA_VALIDATOR_API const std::string &
version_txt();

// Linker level library version check
// Check for library major version only
template <int>
JSON_SCHEMA_VALIDATOR_API bool check_library_version() noexcept;

// Linker level library version check
// Check for library major/minor version
template <int, int>
JSON_SCHEMA_VALIDATOR_API bool check_library_version() noexcept;

// Linker level library version check
// Check for library major/minor/patch version
template <int, int, int>
JSON_SCHEMA_VALIDATOR_API bool check_library_version() noexcept;

} // namespace about
} // namespace json_schema
} // namespace nlohmann

#endif
